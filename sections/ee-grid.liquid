{% comment %}
  EE • Product Grid (no jQuery)
  - 6 product tiles (selectable in customizer)
  - Click (+) to open modal with dynamic options/variants
  - Add to cart via fetch('/cart/add.js')
  - Bonus rule: if Color=Black AND Size=Medium → also add Soft Winter Jacket
{% endcomment %}
<section id="ee-grid-{{ section.id }}" class="ee-grid">
  <div class="ee-grid__head">
    <h2 class="ee-grid__title">{{ section.settings.heading }}</h2>
  </div>

  <div class="ee-grid__wrap">
    {% for i in (1..6) %}
      {% assign key = 'product_' | append: i %}
      {% assign chosen = section.settings[key] %}
      {% if chosen != blank %}
        <article class="ee-card" data-handle="{{ chosen.handle }}" data-product-id="{{ chosen.id }}">
          <button class="ee-card__open" aria-label="Open {{ chosen.title }} quick view">+</button>
          <div class="ee-card__img">
            {% if chosen.featured_image %}
              {{ chosen.featured_image | image_url: width: 720 | image_tag: alt: chosen.title, loading: 'lazy' }}
            {% endif %}
          </div>
        </article>
      {% endif %}
    {% endfor %}
  </div>

  <!-- JSON payload -->
  <script type="application/json" id="ee-grid-data-{{ section.id }}">
    {
      "products":[
        {% assign first = true %}
        {% for i in (1..6) %}
          {% assign key = 'product_' | append: i %}
          {% assign p = section.settings[key] %}
          {% if p %}
            {% unless first %},{% endunless %}
            {
              "id": {{ p.id | json }},
              "handle": {{ p.handle | json }},
              "title": {{ p.title | json }},
              "price": {{ p.price | json }},
              "price_formatted": {{ p.price | money | strip_newlines | json }},
              "description": {{ p.description | strip_html | truncate: 240 | json }},
              "featured_image": {{ p.featured_image | image_url: width: 600 | json }},
              "options": {{ p.options_with_values | json }},
              "variants": [
                {% for v in p.variants %}
                  {
                    "id": {{ v.id | json }},
                    "title": {{ v.title | json }},
                    "available": {{ v.available | json }},
                    "price": {{ v.price | json }},
                    "options": {{ v.options | json }}
                  }{% unless forloop.last %},{% endunless %}
                {% endfor %}
              ]
            }
            {% assign first = false %}
          {% endif %}
        {% endfor %}
      ],
      "autoAdd": {
        {% if section.settings.bonus_product %}
          "title": {{ section.settings.bonus_product.title | json }},
          "variant_id": {{ section.settings.bonus_product.selected_or_first_available_variant.id | json }}
        {% else %}
          "title": null,
          "variant_id": null
        {% endif %}
      }
    }
  </script>

  <!-- Modal -->
  <div class="ee-modal" aria-hidden="true">
    <div class="ee-modal__backdrop"></div>
    <div class="ee-modal__dialog" role="dialog" aria-modal="true" aria-label="Quick view">
      <button class="ee-modal__close" aria-label="Close">×</button>

      <!-- left: image -->
      <div class="ee-modal__media">
        <img class="ee-modal__img" alt="" loading="lazy">
      </div>

      <!-- right: details -->
      <div class="ee-modal__body">
        <h3 class="ee-modal__title"></h3>
        <div class="ee-modal__price"></div>
        <p class="ee-modal__desc"></p>

        <form class="ee-form" novalidate>
          <!-- Color pills injected here -->
          <div class="ee-form__opts"></div>

          <!-- Size dropdown only (no label) -->
          <div class="ee-select">
            <select name="size" aria-label="Size"></select>
            <span class="ee-select__icon">▾</span>
            <span class="ee-select__fade" aria-hidden="true"></span>
          </div>

          <button type="submit" class="ee-btn ee-btn--add">
            <span>ADD TO CART</span>
            <span class="ee-arrow" aria-hidden="true">→</span>
          </button>
          <p class="ee-form__msg" role="status" aria-live="polite"></p>
        </form>
      </div>
    </div>
  </div>
</section>

<style>
  #ee-grid-{{ section.id }}{ --gap:18px; --black:#111; --accent:#FCEB00; }
  .ee-grid__wrap{ max-width:1200px; margin:0 auto; display:grid; grid-template-columns:repeat(3,1fr); gap:var(--gap);}
  @media(max-width:990px){ .ee-grid__wrap{grid-template-columns:repeat(2,1fr);} }
  @media(max-width:640px){ .ee-grid__wrap{grid-template-columns:1fr;} }

  .ee-card{ position:relative; overflow:hidden; border-radius:6px;}
  .ee-card__img img{ display:block; width:100%; height:100%; object-fit:cover; }
  .ee-card__open{position:absolute; right:10px; top:10px; width:32px; height:32px; border-radius:50%; background:#fff; border:1px solid #d9d9d9; cursor:pointer;}

  /* Centered modal */
  .ee-modal{ position:fixed; inset:0; display:none; z-index:100; justify-content:center; align-items:center; }
  .ee-modal[aria-hidden="false"]{ display:flex; }
  .ee-modal__backdrop{ position:absolute; inset:0; background:rgba(0,0,0,.45); animation:fadeIn .3s ease; }
  /* side-by-side layout: image left (120px) + body right */
  .ee-modal__dialog{
    position:relative; z-index:2; background:#fff; width:420px;
    display:grid; grid-template-columns:120px 1fr; gap:14px;
    border-radius:6px; padding:16px; animation:fadeIn .35s ease;
  }
  .ee-modal__close{ position:absolute; right:10px; top:6px; background:none; border:none; font-size:22px; cursor:pointer; }

  .ee-modal__media{ grid-column:1/2; }
  .ee-modal__img{ width:100%; height:120px; object-fit:cover; border:1px solid #eee; }

  .ee-modal__body{ grid-column:2/3; }
  .ee-modal__title{ font-size:18px; margin:2px 0 4px; }
  .ee-modal__price{ font-weight:700; margin-bottom:6px; }
  .ee-modal__desc{ font-size:14px; color:#444; margin:0 0 10px; max-width:260px; }

  /* Color option block (column) */
  .ee-form__opts{ display:flex; flex-direction:column; gap:8px; margin-bottom:8px; }
  .ee-label{ font-size:13px; color:#333; margin:6px 0 2px; }
  .ee-pill{
    border:1px solid #ccc; padding:10px 12px; text-align:left; cursor:pointer;
    background:#fff; transition:background .25s ease, color .25s ease, border-color .25s ease;
  }
  .ee-pill[aria-pressed="true"]{ background:#000; color:#fff; border-color:#000; }

  /* Size dropdown (no label), with slow fade + slow arrow rotate */
  .ee-select{ position:relative; margin:8px 0 14px; }
  .ee-select select{
    appearance:none; width:100%; padding:10px 40px 10px 12px;
    border:1px solid #ccc; background:#fff; cursor:pointer;
  }
  .ee-select__icon{
    position:absolute; right:12px; top:50%; transform:translateY(-50%);
    transition:transform .6s ease; pointer-events:none;
  }
  .ee-select.open .ee-select__icon{ transform:translateY(-50%) rotate(180deg); }

  /* purely decorative fade plate */
  .ee-select__fade{
    content:""; position:absolute; left:0; right:0; top:100%; height:10px;
    background:#fff; opacity:0; transition:opacity .6s ease;
  }
  .ee-select.open .ee-select__fade{ opacity:1; }

  /* Add to cart: solid black, no color change on hover */
  .ee-btn{
    display:inline-flex; justify-content:center; align-items:center; gap:.5rem;
    width:100%; padding:.9rem 1.2rem; background:#000; color:#fff; border:none; cursor:pointer;
  }
  .ee-btn:hover{ background:#000; color:#fff; } /* no change */

  @keyframes fadeIn{ from{opacity:0} to{opacity:1} }
</style>

<script>
(() => {
  const root = document.getElementById('ee-grid-{{ section.id }}');
  if (!root) return;

  const data = JSON.parse(document.getElementById('ee-grid-data-{{ section.id }}').textContent);
  const modal = root.querySelector('.ee-modal');
  const backdrop = modal.querySelector('.ee-modal__backdrop');
  const closeBtn = modal.querySelector('.ee-modal__close');

  const imgEl   = modal.querySelector('.ee-modal__img');
  const titleEl = modal.querySelector('.ee-modal__title');
  const priceEl = modal.querySelector('.ee-modal__price');
  const descEl  = modal.querySelector('.ee-modal__desc');

  const optsEl  = modal.querySelector('.ee-form__opts');
  const sizeSel = modal.querySelector('select[name="size"]');
  const selectWrap = sizeSel.closest('.ee-select');

  const form   = modal.querySelector('.ee-form');
  const msgEl  = modal.querySelector('.ee-form__msg');

  let activeProduct = null;
  let chosen = {};

  const open = () => { modal.setAttribute('aria-hidden','false'); document.documentElement.style.overflow='hidden'; };
  const close = () => { modal.setAttribute('aria-hidden','true'); document.documentElement.style.overflow=''; msgEl.textContent=''; };

  closeBtn.addEventListener('click', close);
  backdrop.addEventListener('click', close);
  document.addEventListener('keydown', e => { if (e.key === 'Escape') close(); });

  // slow "dropdown open" visuals
  sizeSel.addEventListener('focus', () => selectWrap.classList.add('open'));
  sizeSel.addEventListener('blur',  () => selectWrap.classList.remove('open'));

  // open product
  root.querySelectorAll('.ee-card__open').forEach(btn => {
    btn.addEventListener('click', () => {
      const handle = btn.closest('.ee-card').dataset.handle;
      const product = data.products.find(p => p.handle === handle);
      if (!product) return;

      activeProduct = product;
      chosen = {};

      imgEl.src = product.featured_image || '';
      imgEl.alt = product.title;
      titleEl.textContent = product.title;
      priceEl.textContent = product.price_formatted;
      descEl.textContent  = product.description;

      // COLOR option — find by name (case-insensitive)
      const colorOpt = product.options.find(o => /color/i.test(o.name)) || product.options[0];
      optsEl.innerHTML = '';
      if (colorOpt) {
        const wrap = document.createElement('div');
        wrap.innerHTML = `<label class="ee-label">${colorOpt.name}</label>`;
        colorOpt.values.forEach(val => {
          const pill = document.createElement('button');
          pill.type = 'button';
          pill.className = 'ee-pill';
          pill.textContent = val;
          pill.setAttribute('aria-pressed','false');
          pill.addEventListener('click', () => {
            wrap.querySelectorAll('.ee-pill').forEach(p => p.setAttribute('aria-pressed','false'));
            pill.setAttribute('aria-pressed','true');
            chosen[colorOpt.name] = val;
          });
          wrap.appendChild(pill);
        });
        optsEl.appendChild(wrap);
      }

      // SIZE dropdown — find by name (case-insensitive)
      const sizeOpt = product.options.find(o => /size/i.test(o.name));
      let sizes = [];
      if (sizeOpt && sizeOpt.values) {
        sizes = sizeOpt.values;
      } else {
        // fallback: unique across variants (2nd option typical)
        const idx = product.options.findIndex(o => /size/i.test(o.name));
        const set = new Set(product.variants.map(v => v.options[idx >= 0 ? idx : 1]).filter(Boolean));
        sizes = [...set];
      }
      sizeSel.innerHTML = '<option value="" selected>Choose your size</option>' + sizes.map(s => `<option>${s}</option>`).join('');

      open();
    });
  });

  // find variant that matches chosen selections
  function findVariant() {
    if (!activeProduct) return null;
    return activeProduct.variants.find(v =>
      activeProduct.options.every((opt, i) => {
        const want = chosen[opt.name] || ( /size/i.test(opt.name) ? sizeSel.value : null );
        return !want || v.options[i] === want;
      })
    );
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    msgEl.textContent = '';

    const variant = findVariant();
    if (!variant) { msgEl.textContent = 'Please select options.'; return; }

    // add main product
    await fetch('/cart/add.js', {
      method: 'POST', headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id: variant.id, quantity: 1 })
    });

    // bonus auto-add (Black + Medium)
    const colorName = (activeProduct.options.find(o=>/color/i.test(o.name))||{}).name;
    const sizeName  = (activeProduct.options.find(o=>/size/i.test(o.name))||{}).name;
    const pickedColor = colorName ? (chosen[colorName] || '') : '';
    const pickedSize  = sizeName  ? (chosen[sizeName]  || sizeSel.value || '') : '';

    const payload = JSON.parse(document.getElementById('ee-grid-data-{{ section.id }}').textContent);
    if (/black/i.test(pickedColor) && /medium/i.test(pickedSize) && payload.autoAdd && payload.autoAdd.variant_id) {
      await fetch('/cart/add.js', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: payload.autoAdd.variant_id, quantity: 1 })
      });
    }

    msgEl.textContent = 'Added to cart ✔';
    setTimeout(close, 650);
  });
})();
</script>

{% schema %}
{
  "name": "EE • Product Grid",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "Tisso vison in the wild" },
    { "type": "product", "id": "product_1", "label": "Product #1" },
    { "type": "product", "id": "product_2", "label": "Product #2" },
    { "type": "product", "id": "product_3", "label": "Product #3" },
    { "type": "product", "id": "product_4", "label": "Product #4" },
    { "type": "product", "id": "product_5", "label": "Product #5" },
    { "type": "product", "id": "product_6", "label": "Product #6" },
    { "type": "header", "content": "Bonus auto-add rule" },
    { "type": "product", "id": "bonus_product", "label": "Soft Winter Jacket" }
  ],
  "presets": [{ "name": "EE • Product Grid" }]
}
{% endschema %}

