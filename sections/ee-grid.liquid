{% comment %}
  EE • Product Grid (modal layout adjusted)
  - Grid of 6 products selected in customizer
  - Modal: top row = image | details ; bottom row (full width) = color, size, add to cart
  - Custom size dropdown with slow fade and arrow rotate
  - Add to cart via /cart/add.js (+ bonus auto-add)
{% endcomment %}

<section id="ee-grid-{{ section.id }}" class="ee-grid">
  <div class="ee-grid__head">
    <h2 class="ee-grid__title">{{ section.settings.heading }}</h2>
  </div>

  <div class="ee-grid__wrap">
    {% for i in (1..6) %}
      {% assign key = 'product_' | append: i %}
      {% assign chosen = section.settings[key] %}
      {% if chosen != blank %}
        <article class="ee-card" data-handle="{{ chosen.handle }}" data-product-id="{{ chosen.id }}">
          <button class="ee-card__open" aria-label="Open {{ chosen.title }} quick view">+</button>
          <div class="ee-card__img">
            {% if chosen.featured_image %}
              {{ chosen.featured_image | image_url: width: 720 | image_tag: alt: chosen.title, loading: 'lazy' }}
            {% endif %}
          </div>
        </article>
      {% endif %}
    {% endfor %}
  </div>

  <!-- JSON payload for JS -->
  <script type="application/json" id="ee-grid-data-{{ section.id }}">
    {
      "products":[
        {% assign first = true %}
        {% for i in (1..6) %}
          {% assign key = 'product_' | append: i %}
          {% assign p = section.settings[key] %}
          {% if p %}
            {% unless first %},{% endunless %}
            {
              "id": {{ p.id | json }},
              "handle": {{ p.handle | json }},
              "title": {{ p.title | json }},
              "price": {{ p.price | json }},
              "price_formatted": {{ p.price | money | strip_newlines | json }},
              "description": {{ p.description | strip_html | truncate: 240 | json }},
              "featured_image": {{ p.featured_image | image_url: width: 600 | json }},
              "options": {{ p.options_with_values | json }},
              "variants": [
                {% for v in p.variants %}
                  {
                    "id": {{ v.id | json }},
                    "title": {{ v.title | json }},
                    "available": {{ v.available | json }},
                    "price": {{ v.price | json }},
                    "options": {{ v.options | json }}
                  }{% unless forloop.last %},{% endunless %}
                {% endfor %}
              ]
            }
            {% assign first = false %}
          {% endif %}
        {% endfor %}
      ],
      "autoAdd": {
        {% if section.settings.bonus_product %}
          "title": {{ section.settings.bonus_product.title | json }},
          "variant_id": {{ section.settings.bonus_product.selected_or_first_available_variant.id | json }}
        {% else %}
          "title": null,
          "variant_id": null
        {% endif %}
      }
    }
  </script>

  <!-- Modal -->
  <div class="ee-modal" aria-hidden="true">
    <div class="ee-modal__backdrop"></div>

    <!-- Grid: [image | details] on row 1, full-width form on row 2 -->
    <div class="ee-modal__dialog" role="dialog" aria-modal="true" aria-label="Quick view">
      <button class="ee-modal__close" aria-label="Close">×</button>

      <!-- left: image -->
      <div class="ee-modal__media">
        <img class="ee-modal__img" alt="" loading="lazy">
      </div>

      <!-- right: details -->
      <div class="ee-modal__body">
        <h3 class="ee-modal__title"></h3>
        <div class="ee-modal__price"></div>
        <p class="ee-modal__desc"></p>
      </div>

      <!-- row 2: full-width controls -->
      <form class="ee-form" novalidate>
        <div class="ee-form__opts"><!-- Color pills injected here --></div>

        <!-- custom size dropdown (with label + black hover area) -->
        <div class="ee-dd" data-name="size">
          <label id="ee-size-label-{{ section.id }}" class="ee-label ee-dd__field-label">Size</label>
          <button
            type="button"
            class="ee-dd__btn"
            aria-haspopup="listbox"
            aria-expanded="false"
            aria-labelledby="ee-size-label-{{ section.id }}"
          >
            <span class="ee-dd__label">Choose your size</span>
            <span class="ee-dd__icon">▾</span>
          </button>
          <ul class="ee-dd__list" role="listbox" aria-labelledby="ee-size-label-{{ section.id }}"></ul>
        </div>

        <button type="submit" class="ee-btn ee-btn--add">
          <span>ADD TO CART</span>
          <span class="ee-arrow" aria-hidden="true">→</span>
        </button>
        <p class="ee-form__msg" role="status" aria-live="polite"></p>
      </form>
    </div>
  </div>
</section>

<style>
  #ee-grid-{{ section.id }}{ --gap:18px; --black:#111; --accent:#FCEB00; padding: 3rem 1rem 3rem 1rem;}
  .ee-grid__head{ max-width:1200px; margin: 0 0 35px 60px; padding:0 16px; }
  .ee-grid__title{font-size: clamp(28px, 2.3vw, 36px); margin:10px 0 20px;font-weight: 100;}

  .ee-grid__wrap{ max-width:1200px; margin:0 auto; padding:0 16px; display:grid; grid-template-columns:repeat(3,1fr); gap:var(--gap); }
  @media(max-width:990px){ .ee-grid__wrap{ grid-template-columns:repeat(2,1fr); } }
  /* MOBILE: 2 columns */
  @media(max-width:640px){ .ee-grid__wrap{ grid-template-columns:repeat(2,1fr); } }

  /* MOBILE: center heading, no left/right margin */
  @media(max-width:640px){
    .ee-grid__head{
      margin: 0 0 24px 0;
      padding: 0;
      max-width: 100%;
    }
    .ee-grid__title{
      text-align: center;
      margin-left: 0;
      margin-right: 0;
    }
  }

  .ee-card{ position:relative; overflow:hidden; border-radius:6px; }
  .ee-card__img img{ display:block; width:100%; height:100%; object-fit:cover; }
  .ee-card__open{ font-size: 23px;position:absolute; right:10px; top:10px; width:32px; height:32px; border-radius:50%; background:#fff; border:1px solid #d9d9d9; cursor:pointer; }

  /* Center modal & layout */
  .ee-modal{ position:fixed; inset:0; display:none; z-index:100; justify-content:center; align-items:center; }
  .ee-modal[aria-hidden="false"]{ display:flex; }
  .ee-modal__backdrop{ position:absolute; inset:0; background:rgba(0,0,0,.45); animation:fadeIn .3s ease; }
  .ee-modal__dialog{
    position:relative; z-index:2; background:#fff; width:317px;
    display:grid; grid-template-columns:130px 1fr; grid-template-rows:auto auto;
    grid-template-areas:
      "media body"
      "form  form";
    column-gap:14px; row-gap:10px;
    border-radius:6px; padding:16px; animation:fadeIn .35s ease;
  }
  .ee-modal__close{ position:absolute; right:10px; top:6px; background:none; border:none; font-size:22px; cursor:pointer; }
  .ee-modal__media, .ee-modal__body { padding-top: 10px; max-height: 160px;}
  .ee-modal__media{ grid-area:media; }
  .ee-modal__img{ width:100%; height: 160px; object-fit:cover; border:1px solid #eee; }

  .ee-modal__body{ grid-area:body; }
  .ee-modal__title{ font-size: 17px; font-weight: 100; margin: 0px 0px 10px 0px; padding-top: 5px;}
  .ee-modal__price{ font-weight: 500; font-size: 20px; margin-bottom: 6px; }
  .ee-modal__desc{ overflow: hidden;font-size: 11px; font-weight: 500; color:#444; margin:0 0 10px; max-width: 177px;line-height: 15px; }

  .ee-form{ grid-area:form; display:block; margin-top:10px; }
  .ee-form__opts{ display:flex; flex-direction:column; gap:8px; margin-bottom:10px; }
  .ee-label{ font-size:13px; color:#333; margin:6px 0 2px; }
  .ee-pill{width: 50%; border:1px solid #ccc; padding:10px 12px; text-align:left; cursor:pointer; background:#fff; transition:background .25s ease, color .25s ease, border-color .25s ease; }
  .ee-pill[aria-pressed="true"]{ background:#000; color:#fff; border-color:#000; }

  /* Custom dropdown */
  .ee-dd{ position:relative; margin:6px 0 14px; }
  .ee-dd__field-label{
    display:block;
    font-size:13px;
    color:#333;
    margin:6px 0 6px;
  }
  .ee-dd__btn{
    width:100%; display:flex; justify-content:space-between; align-items:center;
    padding:10px 12px; border:1px solid #ccc; background:#fff; cursor:pointer;
    transition: background .25s ease, color .25s ease, border-color .25s ease;
  }
  .ee-dd__btn:hover,
  .ee-dd__btn:focus-visible{
    background:#000;
    color:#fff;
    border-color:#000;
    outline:none;
  }
  .ee-dd__icon{ transition:transform .6s ease; }
  .ee-dd.open .ee-dd__icon{ transform:rotate(180deg); }
  .ee-dd__list{
    position:absolute; left:-1px; right:-1px; top:calc(100% + 2px); max-height:220px; overflow:auto;
    border:1px solid #000; background:#fff; opacity:0; transform:translateY(-6px);
    pointer-events:none; transition:opacity .6s ease, transform .6s ease;
  }
  .ee-dd.open .ee-dd__list{ opacity:1; transform:translateY(0); pointer-events:auto; }
  .ee-dd__list li{ padding:12px; cursor:pointer; transition: background .2s ease, color .2s ease; }
  .ee-dd__list li:hover,
  .ee-dd__list li:focus{ background:#000; color:#fff; }

  /* Add to cart: keep black on hover */
  .ee-btn{
    display:inline-flex; justify-content:center; align-items:center; gap:.5rem;
    width:100%; padding:.9rem 1.2rem; background:#000; color:#fff; border:none; cursor:pointer;
  }
  .ee-btn:hover{ background:#000; color:#fff; }

  @keyframes fadeIn{ from{opacity:0} to{opacity:1} }
</style>

<script>
  (() => {
    const root = document.getElementById('ee-grid-{{ section.id }}');
    if (!root) return;

    const payload = JSON.parse(document.getElementById('ee-grid-data-{{ section.id }}').textContent);
    const modal = root.querySelector('.ee-modal');
    const dialog = modal.querySelector('.ee-modal__dialog');
    const backdrop = modal.querySelector('.ee-modal__backdrop');
    const closeBtn = modal.querySelector('.ee-modal__close');

    const imgEl = modal.querySelector('.ee-modal__img');
    const titleEl = modal.querySelector('.ee-modal__title');
    const priceEl = modal.querySelector('.ee-modal__price');
    const descEl = modal.querySelector('.ee-modal__desc');

    const form = modal.querySelector('.ee-form');
    const colorWrap = modal.querySelector('.ee-form__opts');
    const dd = modal.querySelector('.ee-dd');
    const ddBtn = dd.querySelector('.ee-dd__btn');
    const ddLabel = dd.querySelector('.ee-dd__label');
    const ddList = dd.querySelector('.ee-dd__list');
    const msgEl = modal.querySelector('.ee-form__msg');

    let activeProduct = null;
    let chosen = {};
    let selectedSize = '';

    const open = () => {
      modal.setAttribute('aria-hidden', 'false');
      document.documentElement.style.overflow = 'hidden';
    };
    const close = () => {
      modal.setAttribute('aria-hidden', 'true');
      document.documentElement.style.overflow = '';
      msgEl.textContent = '';
      dd.classList.remove('open');
    };

    closeBtn.addEventListener('click', close);
    backdrop.addEventListener('click', close);
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') close();
    });

    // custom dropdown open/close
    ddBtn.addEventListener('click', () => {
      const openState = dd.classList.toggle('open');
      ddBtn.setAttribute('aria-expanded', openState ? 'true' : 'false');
    });
    document.addEventListener('click', (e) => {
      if (!dialog.contains(e.target)) dd.classList.remove('open');
    });

    // open modal for product
    root.querySelectorAll('.ee-card__open').forEach((btn) => {
      btn.addEventListener('click', () => {
        const handle = btn.closest('.ee-card').dataset.handle;
        const p = payload.products.find((x) => x.handle === handle);
        if (!p) return;

        activeProduct = p;
        chosen = {};
        selectedSize = '';

        imgEl.src = p.featured_image || '';
        imgEl.alt = p.title || '';
        titleEl.textContent = p.title || '';
        priceEl.textContent = p.price_formatted || '';
        descEl.textContent = p.description || '';

        // build color pills (find color option by name)
        colorWrap.innerHTML = '';
        const colorOpt = p.options.find((o) => /color/i.test(o.name));
        if (colorOpt) {
          const block = document.createElement('div');
          block.innerHTML = `<label class="ee-label">${colorOpt.name}</label><br/>`;
          colorOpt.values.forEach((val) => {
            const pill = document.createElement('button');
            pill.type = 'button';
            pill.className = 'ee-pill';
            pill.textContent = val;
            pill.setAttribute('aria-pressed', 'false');
            pill.addEventListener('click', () => {
              block.querySelectorAll('.ee-pill').forEach((el) => el.setAttribute('aria-pressed', 'false'));
              pill.setAttribute('aria-pressed', 'true');
              chosen[colorOpt.name] = val;
            });
            block.appendChild(pill);
          });
          colorWrap.appendChild(block);
        }

        // build size dropdown values slowly fading list (handled by CSS)
        const sizeOpt = p.options.find((o) => /size/i.test(o.name));
        let sizes = [];
        if (sizeOpt) sizes = sizeOpt.values;
        else {
          // fallback unique values for second option if no explicit "Size"
          const idx = p.options.length > 1 ? 1 : 0;
          sizes = [...new Set(p.variants.map((v) => v.options[idx]).filter(Boolean))];
        }
        ddList.innerHTML = '';
        sizes.forEach((v) => {
          const li = document.createElement('li');
          li.textContent = v;
          li.setAttribute('role', 'option');
          li.addEventListener('click', () => {
            selectedSize = v;
            ddLabel.textContent = v;
            dd.classList.remove('open');
          });
          ddList.appendChild(li);
        });
        // reset label
        ddLabel.textContent = 'Choose your size';

        open();
      });
    });

    function findVariant() {
      if (!activeProduct) return null;
      return activeProduct.variants.find((v) =>
        activeProduct.options.every((opt, i) => {
          const want = /size/i.test(opt.name) ? selectedSize : chosen[opt.name] || null;
          return !want || v.options[i] === want;
        })
      );
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      msgEl.textContent = '';

      const v = findVariant();
      if (!v) {
        msgEl.textContent = 'Please select options.';
        return;
      }

      await fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: v.id, quantity: 1 }),
      });

      // bonus: auto add when Color=Black & Size=Medium
      const colorName = (activeProduct.options.find((o) => /color/i.test(o.name)) || {}).name;
      const pickedColor = colorName ? chosen[colorName] || '' : '';
      const pickedSize = selectedSize || '';

      if (/black/i.test(pickedColor) && /medium/i.test(pickedSize) && payload.autoAdd && payload.autoAdd.variant_id) {
        await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: payload.autoAdd.variant_id, quantity: 1 }),
        });
      }

      msgEl.textContent = 'Added to cart ✔';
      setTimeout(close, 650);
    });
  })();
</script>

{% schema %}
{
  "name": "EE • Product Grid",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "Tisso vison in the wild" },
    { "type": "product", "id": "product_1", "label": "Product #1" },
    { "type": "product", "id": "product_2", "label": "Product #2" },
    { "type": "product", "id": "product_3", "label": "Product #3" },
    { "type": "product", "id": "product_4", "label": "Product #4" },
    { "type": "product", "id": "product_5", "label": "Product #5" },
    { "type": "product", "id": "product_6", "label": "Product #6" },
    { "type": "header", "content": "Bonus auto-add rule" },
    {
      "type": "product",
      "id": "bonus_product",
      "label": "Soft Winter Jacket (auto add when Color=Black & Size=Medium)"
    }
  ],
  "presets": [{ "name": "EE • Product Grid" }]
}
{% endschema %}
