{% comment %}
  EE • Product Grid (no jQuery)
  - 6 product tiles (selectable in customizer)
  - Click (+) to open modal with dynamic options/variants
  - Add to cart via fetch('/cart/add.js')
  - Bonus rule: if Color=Black AND Size=Medium → also add Soft Winter Jacket
{% endcomment %}

<section id="ee-grid-{{ section.id }}" class="ee-grid">
  <div class="ee-grid__head">
    <h2 class="ee-grid__title">{{ section.settings.heading }}</h2>
  </div>

  <div class="ee-grid__wrap">
    {% for i in (1..6) %}
      {% assign key = 'product_' | append: i %}
      {% assign chosen = section.settings[key] %}
      {% if chosen != blank %}
        <article class="ee-card"
                 data-handle="{{ chosen.handle }}"
                 data-product-id="{{ chosen.id }}">
          <button class="ee-card__open" aria-label="Open {{ chosen.title }} quick view">+</button>
          <div class="ee-card__img">
            {% if chosen.featured_image %}
              <img loading="lazy" alt="{{ chosen.title | escape }}"
                   src="{{ chosen.featured_image | image_url: width: 720 }}">
            {% endif %}
          </div>
        </article>
      {% endif %}
    {% endfor %}
  </div>

  {%- comment -%} Products JSON payload for JS {%- endcomment -%}
  <script type="application/json" id="ee-grid-data-{{ section.id }}">
  {
    "products":[
      {% assign first = true %}
      {% for i in (1..6) %}
        {% assign key = 'product_' | append: i %}
        {% assign p = section.settings[key] %}
        {% if p %}
          {% unless first %},{% endunless %}
          {
            "id": {{ p.id | json }},
            "handle": {{ p.handle | json }},
            "title": {{ p.title | json }},
            "price": {{ p.price | json }},
            "price_formatted": {{ p.price | money | strip_newlines | json }},
            "description": {{ p.description | strip_html | truncate: 240 | json }},
            "featured_image": {{ p.featured_image | image_url: width: 600 | json }},
            "options": {{ p.options_with_values | json }},
            "variants": [
              {% for v in p.variants %}
                {
                  "id": {{ v.id | json }},
                  "title": {{ v.title | json }},
                  "available": {{ v.available | json }},
                  "price": {{ v.price | json }},
                  "options": {{ v.options | json }}
                }{% unless forloop.last %},{% endunless %}
              {% endfor %}
            ]
          }
          {% assign first = false %}
        {% endif %}
      {% endfor %}
    ],
    "autoAdd": {
      {% if section.settings.bonus_product %}
        "title": {{ section.settings.bonus_product.title | json }},
        "variant_id": {{ section.settings.bonus_product.selected_or_first_available_variant.id | json }}
      {% else %}
        "title": null,
        "variant_id": null
      {% endif %}
    }
  }
  </script>

  <!-- Reusable modal -->
  <div class="ee-modal" aria-hidden="true">
    <div class="ee-modal__backdrop"></div>
    <div class="ee-modal__dialog" role="dialog" aria-modal="true" aria-label="Quick view">
      <button class="ee-modal__close" aria-label="Close">×</button>

      <div class="ee-modal__media">
        <img class="ee-modal__img" alt="">
      </div>

      <div class="ee-modal__body">
        <h3 class="ee-modal__title"></h3>
        <div class="ee-modal__price"></div>
        <p class="ee-modal__desc"></p>

        <form class="ee-form" novalidate>
          <div class="ee-form__opts"></div>

          <div class="ee-form__size">
            <label class="ee-label">Size</label>
            <div class="ee-select">
              <select name="size"></select>
              <span class="ee-select__icon">▾</span>
            </div>
          </div>

          <button type="submit" class="ee-btn ee-btn--add">
            <span>ADD TO CART</span>
            <span class="ee-arrow" aria-hidden="true">→</span>
          </button>
          <p class="ee-form__msg" role="status" aria-live="polite"></p>
        </form>
      </div>
    </div>
  </div>
</section>

<style>
  #ee-grid-{{ section.id }}{ --gap:18px; --black:#111; --accent:#FCEB00; }
  #ee-grid-{{ section.id }} .ee-grid__head{ max-width:1200px; margin:0 auto 10px; padding:0 16px; }
  #ee-grid-{{ section.id }} .ee-grid__title{ font-size:clamp(22px,2.6vw,36px); margin:10px 0 20px; }

  #ee-grid-{{ section.id }} .ee-grid__wrap{
    max-width:1200px; margin:0 auto; padding:0 16px;
    display:grid; grid-template-columns: repeat(3, 1fr); gap: var(--gap);
  }
  @media (max-width: 990px){
    #ee-grid-{{ section.id }} .ee-grid__wrap{ grid-template-columns: repeat(2, 1fr); }
  }
  @media (max-width: 640px){
    #ee-grid-{{ section.id }} .ee-grid__wrap{ grid-template-columns: 1fr; }
  }

  .ee-card{ position:relative; overflow:hidden; border-radius:6px; }
  .ee-card__img img{ width:100%; height:100%; object-fit:cover; display:block; }
  .ee-card__open{
    position:absolute; right:10px; top:10px; width:32px; height:32px; border-radius:999px;
    background:#fff; border:1px solid #d9d9d9; font-weight:700; line-height:1; cursor:pointer;
  }

  .ee-modal{ position:fixed; inset:0; display:none; z-index:60; }
  .ee-modal[aria-hidden="false"]{ display:block; }
  .ee-modal__backdrop{ position:absolute; inset:0; background:rgba(0,0,0,.45); }
  .ee-modal__dialog{
    position:relative; background:#fff; width:min(620px, 92vw); margin:6vh auto;
    border:1px solid #ddd; border-radius:6px; display:grid; grid-template-columns:160px 1fr; gap:18px;
    padding:18px;
  }
  @media (max-width:640px){ .ee-modal__dialog{ grid-template-columns:1fr; width:min(560px,92vw); } }
  .ee-modal__close{ position:absolute; right:12px; top:8px; border:none; background:transparent; font-size:22px; cursor:pointer; }
  .ee-modal__img{ width:100%; height:130px; object-fit:cover; border:1px solid #eee; }
  .ee-modal__title{ margin:4px 0 2px; font-size:18px; }
  .ee-modal__price{ font-weight:700; margin-bottom:6px; }
  .ee-modal__desc{ font-size:14px; line-height:1.4; color:#444; margin:0 0 10px; }

  .ee-form__opts{ display:grid; grid-template-columns:1fr 1fr; gap:10px; margin-bottom:10px; }
  .ee-label{ display:block; font-size:13px; margin:6px 0 4px; color:#333; }
  .ee-pill{ border:1px solid #ccc; padding:10px 12px; text-align:left; cursor:pointer; background:#fff; }
  .ee-pill[aria-pressed="true"]{ outline:2px solid var(--black); border-color:var(--black); }

  .ee-select{ position:relative; }
  .ee-select select{ appearance:none; width:100%; padding:10px 36px 10px 12px; border:1px solid #ccc; background:#fff; }
  .ee-select__icon{ position:absolute; right:10px; top:50%; transform:translateY(-50%); pointer-events:none; }

  .ee-btn{
    position:relative; overflow:hidden; isolation:isolate; display:inline-flex; align-items:center; gap:.5rem;
    padding:.8rem 1.2rem; border:none; background:#000; color:#fff; width:100%; justify-content:center;
  }
  .ee-btn::before{ content:""; position:absolute; inset:0; transform:scaleX(0); transform-origin:left; background:var(--accent); transition:transform .5s ease; z-index:-1; }
  .ee-btn:hover::before{ transform:scaleX(1); }
  .ee-btn:hover{ color:#000; }
  .ee-arrow{ margin-left:.4rem; }
  .ee-form__msg{ margin-top:8px; font-size:13px; color:#0a7a0a; }
</style>

<script>
  (() => {
    const root   = document.getElementById('ee-grid-{{ section.id }}');
    if (!root) return;

    const data   = JSON.parse(document.getElementById('ee-grid-data-{{ section.id }}').textContent);
    const modal  = root.querySelector('.ee-modal');
    const closeB = modal.querySelector('.ee-modal__close');
    const backdrop = modal.querySelector('.ee-modal__backdrop');

    const imgEl   = modal.querySelector('.ee-modal__img');
    const titleEl = modal.querySelector('.ee-modal__title');
    const priceEl = modal.querySelector('.ee-modal__price');
    const descEl  = modal.querySelector('.ee-modal__desc');
    const optsEl  = modal.querySelector('.ee-form__opts');
    const sizeSel = modal.querySelector('.ee-form [name="size"]');
    const form    = modal.querySelector('.ee-form');
    const msgEl   = modal.querySelector('.ee-form__msg');

    let activeProduct = null;
    let chosen = {};

    const openModal  = () => { modal.setAttribute('aria-hidden', 'false'); document.documentElement.style.overflow='hidden'; }
    const closeModal = () => { modal.setAttribute('aria-hidden', 'true'); document.documentElement.style.overflow=''; msgEl.textContent=''; }

    closeB.addEventListener('click', closeModal);
    backdrop.addEventListener('click', closeModal);
    document.addEventListener('keydown', (e)=>{ if(e.key==='Escape') closeModal(); });

    root.querySelectorAll('.ee-card__open').forEach(btn => {
      btn.addEventListener('click', () => {
        const article = btn.closest('.ee-card');
        const handle  = article.dataset.handle;
        const product = data.products.find(p => p.handle === handle);
        if (!product) return;

        activeProduct = product;
        chosen = {};

        imgEl.src    = product.featured_image;
        imgEl.alt    = product.title;
        titleEl.textContent = product.title;
        priceEl.textContent = product.price_formatted;
        descEl.textContent  = product.description;

        optsEl.innerHTML = '';
        product.options.slice(0,2).forEach((opt) => {
          const wrap = document.createElement('div');
          wrap.className = 'ee-form__opt';
          wrap.innerHTML = `<label class="ee-label">${opt.name}</label>`;
          opt.values.forEach(val => {
            const pill = document.createElement('button');
            pill.type = 'button';
            pill.className = 'ee-pill';
            pill.setAttribute('aria-pressed','false');
            pill.textContent = val;
            pill.addEventListener('click', () => {
              [...wrap.querySelectorAll('.ee-pill')].forEach(p=>p.setAttribute('aria-pressed','false'));
              pill.setAttribute('aria-pressed','true');
              chosen[opt.name] = val;
              updateSizes();
            });
            wrap.appendChild(pill);
          });
          optsEl.appendChild(wrap);
        });

        sizeSel.innerHTML = '';
        updateSizes();
        openModal();
      });
    });

    function updateSizes(){
      const sizeOpt = (activeProduct.options.find(o => /size/i.test(o.name)) || {}).name || 'Size';
      const colorOpt = (activeProduct.options.find(o => /color/i.test(o.name)) || {}).name;

      const sizes = new Set();
      activeProduct.variants.forEach(v => {
        if (colorOpt && chosen[colorOpt]) {
          const colorIdx = activeProduct.options.findIndex(o => o.name === colorOpt);
          if (v.options[colorIdx] !== chosen[colorOpt]) return;
        }
        const sizeIdx = activeProduct.options.findIndex(o => o.name === sizeOpt);
        if (sizeIdx >= 0) sizes.add(v.options[sizeIdx]);
      });

      const arr = [...sizes];
      sizeSel.innerHTML = `<option value="" selected>Choose your size</option>` + arr.map(s=>`<option>${s}</option>`).join('');
    }

    function findVariant(){
      return activeProduct.variants.find(v =>
        activeProduct.options.every((opt, i) => {
          const want = chosen[opt.name];
          return !want || v.options[i] === want;
        })
      );
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      msgEl.textContent = '';

      const v = findVariant();
      if (!v) { msgEl.textContent = 'Please select options.'; return; }

      try{
        await fetch('/cart/add.js', {
          method:'POST',
          headers:{'Content-Type':'application/json'},
          body: JSON.stringify({ id: v.id, quantity: 1 })
        });

        const colorOpt = (activeProduct.options.find(o => /color/i.test(o.name)) || {}).name;
        const sizeOpt  = (activeProduct.options.find(o => /size/i.test(o.name)) || {}).name;
        const pickedColor = colorOpt ? (chosen[colorOpt] || '') : '';
        const pickedSize  = sizeOpt  ? (chosen[sizeOpt]  || '') : '';

        if (/black/i.test(pickedColor) && /medium/i.test(pickedSize) && data.autoAdd.variant_id){
          await fetch('/cart/add.js', {
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body: JSON.stringify({ id: data.autoAdd.variant_id, quantity: 1 })
          });
        }

        msgEl.textContent = 'Added to cart ✔';
        setTimeout(closeModal, 650);
      }catch(err){
        msgEl.textContent = 'Could not add to cart. Please try again.';
        console.error(err);
      }
    });
  })();
</script>

{% schema %}
{
  "name": "EE • Product Grid",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "Tisso vison in the wild" },

    { "type": "product", "id": "product_1", "label": "Product #1" },
    { "type": "product", "id": "product_2", "label": "Product #2" },
    { "type": "product", "id": "product_3", "label": "Product #3" },
    { "type": "product", "id": "product_4", "label": "Product #4" },
    { "type": "product", "id": "product_5", "label": "Product #5" },
    { "type": "product", "id": "product_6", "label": "Product #6" },

    { "type": "header", "content": "Bonus auto-add rule" },
    { "type": "product", "id": "bonus_product", "label": "Soft Winter Jacket (auto add when Color=Black & Size=Medium)" }
  ],
  "presets": [{ "name": "EE • Product Grid" }]
}
{% endschema %}
